package utils

import (
	"errors"
	"log"
	"os"
	"time"
	"strconv"

	"github.com/golang-jwt/jwt/v4"
)

// ğŸ”¥ **Global `jwtSecret` deÄŸiÅŸkeni** - TÃ¼m sistemde aynÄ± olacak
var jwtSecret = []byte(getEnv("JWT_SECRET", "supersecretkey"))

// âœ… Ã‡evresel deÄŸiÅŸken okuma fonksiyonu
func getEnv(key, fallback string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return fallback
}

// âœ… **JWT Token oluÅŸturma fonksiyonu**
func GenerateToken(userID uint) (string, time.Time, error) {
	expirationTime := time.Now().Add(24 * time.Hour) // 24 saat geÃ§erli

	claims := jwt.MapClaims{
		"sub": strconv.Itoa(int(userID)), // **KullanÄ±cÄ± ID uint -> string**
		"exp": expirationTime.Unix(),     // **Token sÃ¼resi**
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(jwtSecret)
	if err != nil {
		log.Println("JWT oluÅŸturulamadÄ±:", err)
		return "", time.Time{}, err
	}

	return tokenString, expirationTime, nil
}

// âœ… **JWT Token doÄŸrulama fonksiyonu**
func ValidateToken(tokenString string) (uint, error) {
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return jwtSecret, nil
	})

	if err != nil {
		log.Println("Hata: Token Ã§Ã¶zÃ¼lemedi -", err)
		return 0, errors.New("geÃ§ersiz token")
	}

	// âœ… **Claims bilgilerini al**
	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
		// ğŸ”¥ `sub` deÄŸerini uint olarak dÃ¶ndÃ¼r
		userID, err := strconv.Atoi(claims["sub"].(string))
		if err != nil {
			return 0, errors.New("token'daki user ID hatalÄ±")
		}
		return uint(userID), nil
	}

	return 0, errors.New("token geÃ§ersiz")
}
