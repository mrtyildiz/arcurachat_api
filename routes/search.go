package routes

import (
	"net/http"
	"strings"

	"arcurachat_api/database"
	"arcurachat_api/models"

	"github.com/gin-gonic/gin"
)

// âœ… SQL Injection'a karÅŸÄ± gÃ¼venli bir arama fonksiyonu
func sanitizeQuery(query string) string {
	query = strings.ReplaceAll(query, "%", `\%`)
	query = strings.ReplaceAll(query, "_", `\_`)
	query = strings.TrimSpace(query)
	return query
}

// âœ… KullanÄ±cÄ±larÄ± Arama (SQL Injection'a karÅŸÄ± gÃ¼venli)
func SearchUsers(c *gin.Context) {
	query := c.Query("query")
	if query == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Arama terimi belirtilmelidir"})
		return
	}

	query = sanitizeQuery(query) // ğŸ”¥ KullanÄ±cÄ± girdisini temizle

	var users []models.User
	if err := database.DB.Where("username LIKE ? ESCAPE '\\' OR email LIKE ? ESCAPE '\\'", "%"+query+"%", "%"+query+"%").Find(&users).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "KullanÄ±cÄ±lar aranÄ±rken hata oluÅŸtu"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"users": users})
}

// âœ… GruplarÄ± Arama (SQL Injection'a karÅŸÄ± gÃ¼venli)
func SearchGroups(c *gin.Context) {
	query := c.Query("query")
	if query == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Arama terimi belirtilmelidir"})
		return
	}

	query = sanitizeQuery(query) // ğŸ”¥ KullanÄ±cÄ± girdisini temizle

	var groups []models.Group
	if err := database.DB.Where("name LIKE ? ESCAPE '\\'", "%"+query+"%").Find(&groups).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Gruplar aranÄ±rken hata oluÅŸtu"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"groups": groups})
}

// âœ… MesajlarÄ± Arama (SQL Injection'a karÅŸÄ± gÃ¼venli)
func SearchMessages(c *gin.Context) {
	query := c.Query("query")
	if query == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Arama terimi belirtilmelidir"})
		return
	}

	query = sanitizeQuery(query) // ğŸ”¥ KullanÄ±cÄ± girdisini temizle

	var messages []models.Message
	if err := database.DB.Where("content LIKE ? ESCAPE '\\'", "%"+query+"%").Find(&messages).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Mesajlar aranÄ±rken hata oluÅŸtu"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"messages": messages})
}

// âœ… Arama route'larÄ±nÄ± kaydet
func RegisterSearchRoutes(router *gin.Engine) {
	searchRoutes := router.Group("/search")
	searchRoutes.GET("/users", SearchUsers)
	searchRoutes.GET("/groups", SearchGroups)
	searchRoutes.GET("/messages", SearchMessages)
}
