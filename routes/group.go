package routes

import (
	"net/http"

	"arcurachat_api/database"
	"arcurachat_api/models"

	"github.com/gin-gonic/gin"
)

// âœ… Grup oluÅŸturma
func CreateGroup(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	var input struct {
		Name string `json:"name" binding:"required"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "GeÃ§ersiz veri"})
		return
	}

	group := models.Group{Name: input.Name, OwnerID: userID.(uint)}
	if err := database.DB.Create(&group).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Grup oluÅŸturulamadÄ±"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Grup baÅŸarÄ±yla oluÅŸturuldu", "data": group})
}

// âœ… Grup bilgilerini getir
func GetGroup(c *gin.Context) {
	groupID := c.Param("group_id")

	var group models.Group
	if err := database.DB.Preload("Members").First(&group, groupID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Grup bulunamadÄ±"})
		return
	}

	c.JSON(http.StatusOK, group)
}

// âœ… Grup bilgilerini gÃ¼ncelle
func UpdateGroup(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	groupID := c.Param("group_id")

	var group models.Group
	if err := database.DB.First(&group, groupID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Grup bulunamadÄ±"})
		return
	}

	if group.OwnerID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "Bu grubu gÃ¼ncellemeye yetkiniz yok"})
		return
	}

	var input struct {
		Name string `json:"name"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "GeÃ§ersiz veri"})
		return
	}

	database.DB.Model(&group).Updates(models.Group{Name: input.Name})
	c.JSON(http.StatusOK, gin.H{"message": "Grup bilgileri gÃ¼ncellendi", "data": group})
}

// âœ… Grubu sil
func DeleteGroup(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	groupID := c.Param("group_id")

	var group models.Group
	if err := database.DB.First(&group, groupID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Grup bulunamadÄ±"})
		return
	}

	if group.OwnerID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "Bu grubu silmeye yetkiniz yok"})
		return
	}

	if err := database.DB.Delete(&group).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Grup silinemedi"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Grup baÅŸarÄ±yla silindi"})
}

// âœ… Gruba kullanÄ±cÄ± ekle
func AddMemberToGroup(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	groupID := c.Param("group_id")

	var group models.Group
	if err := database.DB.First(&group, groupID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Grup bulunamadÄ±"})
		return
	}

	// KullanÄ±cÄ± grup sahibi mi?
	if group.OwnerID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "Bu gruba Ã¼ye eklemeye yetkiniz yok"})
		return
	}

	// JSON Verisini DoÄŸrula
	var input struct {
		UserID uint `json:"user_id" binding:"required"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "GeÃ§ersiz veri"})
		return
	}

	// KullanÄ±cÄ±nÄ±n var olup olmadÄ±ÄŸÄ±nÄ± kontrol et
	var user models.User
	if err := database.DB.First(&user, input.UserID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "KullanÄ±cÄ± bulunamadÄ±"})
		return
	}

	// KullanÄ±cÄ± zaten grupta mÄ±?
	var existingMember models.GroupMember
	if err := database.DB.Where("group_id = ? AND user_id = ?", group.ID, input.UserID).First(&existingMember).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "KullanÄ±cÄ± zaten grupta"})
		return
	}

	// KullanÄ±cÄ±yÄ± gruba ekle
	groupMember := models.GroupMember{
		GroupID: group.ID,
		UserID:  input.UserID,
	}

	if err := database.DB.Create(&groupMember).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "KullanÄ±cÄ± gruba eklenemedi"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "KullanÄ±cÄ± gruba eklendi"})
}


// âœ… Gruptan kullanÄ±cÄ± Ã§Ä±kar
func RemoveMemberFromGroup(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	groupID := c.Param("group_id")
	removeUserID := c.Param("user_id")

	var group models.Group
	if err := database.DB.First(&group, groupID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Grup bulunamadÄ±"})
		return
	}

	if group.OwnerID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "Bu gruptan kullanÄ±cÄ± Ã§Ä±karmaya yetkiniz yok"})
		return
	}

	if err := database.DB.Where("group_id = ? AND user_id = ?", groupID, removeUserID).Delete(&models.GroupMember{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "KullanÄ±cÄ± gruptan Ã§Ä±karÄ±lamadÄ±"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "KullanÄ±cÄ± gruptan Ã§Ä±karÄ±ldÄ±"})
}

// âœ… Grup route'larÄ±nÄ± kaydet
func RegisterGroupRoutes(router *gin.Engine) {
	groupRoutes := router.Group("/groups")
	groupRoutes.Use(AuthMiddleware()) // ğŸ”¥ JWT DoÄŸrulamasÄ± Ekledik
	{
		groupRoutes.POST("/create", CreateGroup)
		groupRoutes.GET("/:group_id", GetGroup)
		groupRoutes.PUT("/:group_id", UpdateGroup)
		groupRoutes.DELETE("/:group_id", DeleteGroup)
		groupRoutes.POST("/:group_id/members", AddMemberToGroup)
		groupRoutes.DELETE("/:group_id/members/:user_id", RemoveMemberFromGroup)
	}
}
