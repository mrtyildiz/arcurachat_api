package routes

import (
	"net/http"
	"time"

	"arcurachat_api/database"
	"arcurachat_api/models"
	"github.com/gin-gonic/gin"
)

func RegisterMessageRoutes(router *gin.Engine) {
	messageRoutes := router.Group("/messages")
	messageRoutes.Use(AuthMiddleware())

	messageRoutes.POST("/send", SendMessage)                   // ğŸ”¥ Mesaj gÃ¶nderme
	messageRoutes.GET("/:conversation_id", GetMessagesByConversation) // ğŸ”¥ Belirli konuÅŸmanÄ±n mesajlarÄ±nÄ± getir
	messageRoutes.DELETE("/:message_id", DeleteMessage)       // ğŸ”¥ MesajÄ± sil
	messageRoutes.PUT("/:message_id/edit", EditMessage)       // ğŸ”¥ MesajÄ± dÃ¼zenle
	messageRoutes.POST("/:message_id/read", MarkMessageAsRead) // ğŸ”¥ MesajÄ± okundu olarak iÅŸaretle
}
// ğŸ”¥ 1. Mesaj GÃ¶nderme (POST /messages/send)
func SendMessage(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	var input struct {
		ConversationID uint   `json:"conversation_id"`
		Content        string `json:"content"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "GeÃ§ersiz veri"})
		return
	}

	message := models.Message{
		ConversationID: input.ConversationID,
		SenderID:       userID.(uint),
		Content:        input.Content,
		IsRead:         false,
	}

	if err := database.DB.Create(&message).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Mesaj gÃ¶nderilemedi"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Mesaj baÅŸarÄ±yla gÃ¶nderildi", "data": message})
}

// ğŸ”¥ 2. Belirli Bir KonuÅŸmanÄ±n MesajlarÄ±nÄ± Getir (GET /messages/:conversation_id)
func GetMessagesByConversation(c *gin.Context) {
	conversationID := c.Param("conversation_id")

	var messages []models.Message
	if err := database.DB.Where("conversation_id = ?", conversationID).Find(&messages).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Mesajlar alÄ±namadÄ±"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": messages})
}

// ğŸ”¥ 3. MesajÄ± Silme (DELETE /messages/:message_id)
func DeleteMessage(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	messageID := c.Param("message_id")
	var message models.Message

	if err := database.DB.First(&message, messageID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Mesaj bulunamadÄ±"})
		return
	}

	// Sadece mesajÄ±n sahibi silebilir
	if message.SenderID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "Bu mesajÄ± silmeye yetkiniz yok"})
		return
	}

	database.DB.Delete(&message)
	c.JSON(http.StatusOK, gin.H{"message": "Mesaj baÅŸarÄ±yla silindi"})
}

// ğŸ”¥ 4. MesajÄ± DÃ¼zenleme (PUT /messages/:message_id/edit)
func EditMessage(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Yetkisiz iÅŸlem"})
		return
	}

	messageID := c.Param("message_id")
	var message models.Message

	// MesajÄ± al
	if err := database.DB.First(&message, messageID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Mesaj bulunamadÄ±"})
		return
	}

	// ğŸ”¥ Sadece mesajÄ±n sahibi dÃ¼zenleyebilir
	if message.SenderID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "Bu mesajÄ± dÃ¼zenlemeye yetkiniz yok"})
		return
	}

	var input struct {
		Content string `json:"content"`
	}

	// JSON formatÄ±ndaki yeni iÃ§erik verisini al
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "GeÃ§ersiz veri"})
		return
	}

	// Mesaj iÃ§eriÄŸini gÃ¼ncelle
	database.DB.Model(&message).Update("content", input.Content)

	c.JSON(http.StatusOK, gin.H{
		"message": "Mesaj baÅŸarÄ±yla gÃ¼ncellendi",
		"data": gin.H{
			"id":             message.ID,
			"conversation_id": message.ConversationID,
			"sender_id":      message.SenderID,
			"content":        message.Content,
			"is_read":        message.IsRead,
			"read_at":        message.ReadAt,
		},
	})
}


// ğŸ”¥ 5. MesajÄ± Okundu Olarak Ä°ÅŸaretleme (POST /messages/:message_id/read)
func MarkMessageAsRead(c *gin.Context) {
	messageID := c.Param("message_id")
	var message models.Message

	if err := database.DB.First(&message, messageID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Mesaj bulunamadÄ±"})
		return
	}

	// Zaten okunmuÅŸsa iÅŸlem yapma
	if message.IsRead {
		c.JSON(http.StatusOK, gin.H{"message": "Mesaj zaten okunmuÅŸ"})
		return
	}

	database.DB.Model(&message).Updates(models.Message{
		IsRead: true,
		ReadAt: time.Now(),
	})

	c.JSON(http.StatusOK, gin.H{"message": "Mesaj okundu olarak iÅŸaretlendi"})
}
